#!/usr/bin/perl

# Copyright (c) 2016 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

use strict;
use warnings;

use Finance::OFX;
use Finance::OFX::Institution;
use Finance::OFX::Account;

use Data::Dumper;

our ($org, $fid, $url);
our ($user, $pass);

eval `cat ~/.ofxcli.conf`;

printf "ORG: %s\n", $org;
printf "FID: %s\n", $fid;
printf "URL: %s\n", $url;

my $fi = Finance::OFX::Institution->new(ORG=>$org, FID=>$fid, URL=>$url);
my $ofx = Finance::OFX->new(
	userID=>$user,
	userPass=>$pass,
	Institution=>$fi,
	ssl_opts => {
		# XXX without this, we don't like the cert somehow, fixme!!!
		verify_hostname => 0,
	},
);

my @accounts = $ofx->accounts;

if (! @accounts) {
	printf "Something went wrong: %s\n", $ofx->response;
	exit(1);
}
print "Seems ok so far:\n";
#print recurse_dump($ofx->response->ofx_header());
#print "Response:\n";
#print recurse_dump($ofx->response);
my $status = $ofx->response->signon_status_code( $fi );
printf "Signon status code: %s\n", defined($status) ? $status : "<undef>";

      # 1179955919 150002.02 140002.02 CHECKING ING Medical Fund
print "    Account Available    Ledger\n";
print "     Number   Balance   Balance     Type Name\n";
my $afmt = "%11d %9.2f %9.2f %8s %s\n";

foreach my $acct (@accounts) {
	if (!defined($acct)) {
		next;
	}
	if (ref($acct) eq "") {
		printf "Account is not a hash: %s\n", $acct;
		next;
	}
	#print "Account is a ".ref($acct)."\n";
	#print "Account info dumped:\n";
	#print recurse_dump($acct);
	my $id = $acct->{acctid};
	my $type = $acct->{accttype};
	my $desc = $acct->{desc};
	my $acct_obj = Finance::OFX::Account->new(
		URL => $url,
		Type => $type,
		ID => $id,
		FID => $fid
	);
	#my $bal = $ofx->balance( $acct_obj );
	#if (defined($bal)) {
	#	print "ofx->balance( \$acct ): ". recurse_dump( $bal );
	#	next;
	#}
	# some institutions ignore start/end, others require it
	#  Capital One 360 requires it, so lets just say now and be done
	# statement(acct, start=> <date>, end=> <date>, transactions => 
	my $now = time();
	my $r = $ofx->{ua}->statement($acct_obj, start=> $now, end=> $now);
	my $trans = $r->ofx->{bankmsgsrsv1}{stmttrnrs};
	my $availbal = $trans->{stmtrs}->{availbal}->{balamt};
	my $ledgerbal = $trans->{stmtrs}->{ledgerbal}->{balamt};
	printf $afmt, $id, $availbal, $ledgerbal, $type, $desc;
	#print "${id} statement: ".recurse_dump($r);
	#if (ref($r) eq "OFX::Finance::Response") {
		#print "${id} statement: ".recurse_dump($r);
		#print "${id} statement: ".recurse_dump($r->{ofx});
		#print "${id} transaction: ".recurse_dump($trans);
	#}
	# XXX temp until kinks worked out
	#last;
}

sub
recurse_dump
{
        my ($item) = @_;
        my $d = Data::Dumper->new([$item]);
        $d->Purity(1);
        $d->Terse(0);
        $d->Deepcopy(1);
        $d->Indent(2);
        $d->Sortkeys(1);
        #$d->Deparse(1);
        return $d->Dump();
}
